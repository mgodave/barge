apply plugin: 'java'
apply plugin: 'application'

// TODO do we need the shade plugin? org.gradle.plugins:shadow:0.7.4

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

// used by the application plugin
mainClassName = 'org.robotninjas.barge.Raft'

dependencies {
    compile 'org.robotninjas:netty-protobuf-rpc:2.0.0-SNAPSHOT'
    compile 'com.google.guava:guava:15.0'
    compile 'com.google.inject:guice:3.0'
    compile 'com.google.inject.extensions:guice-assistedinject:3.0'
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'commons-pool:commons-pool:1.6'
    compile 'com.github.sbtourist:journalio:1.4'
    compile('com.github.rholder:guava-retrying:1.0.4') {
        // Exclude guava from this dependency so we can use a newer version
        exclude group: 'com.google.guava', module: 'guava'
    }

    provided 'com.google.code.findbugs:jsr305:1.3.9'

    runtime 'ch.qos.logback:logback-core:1.0.11'

    testCompile 'junit:junit:4.9'
    testCompile 'org.mockito:mockito-all:1.8.0'
}

// turns out, a plugin to run this might just be overkill...
task updateProtobufs() << {
    def cmd = ['/usr/bin/protoc']
    cmd.add("--java_out=${project.file('src/main/java')}")
    cmd.add("-I" + project.file('src/main/proto/'))

    fileTree('src/main/proto').each {
        cmd.add(it.absolutePath)  
    }
    
    println cmd
    def output = new StringBuffer()
    Process result = cmd.execute()
    result.consumeProcessOutput(output, output)
    result.waitFor()
    if (result.exitValue() == 0) {
        logger.log(LogLevel.INFO, output.toString())
    } else {
        throw new RuntimeException(output.toString())
    }
}
